# This CloudFormation template deploys a basic VPC / Network

AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Configuration Parameters
      Parameters :
      - VPCCIDR
      - PublicCIDR1
      - PublicCIDR2
      - PrivateCIDR1
      - PrivateCIDR2
      - KeyPairName1
      - KeyPairName2
      - KeyPairName3
      
    ParameterLabels:
      VPCCIDR:
        default: Enter CIDR of new VPC
      PublicCIDR1:
        default: Enter CIDR of the Public Subnet 1
      PublicCIDR2:
        default: Enter CIDR of the Public Subnet 2
      PrivateCIDR1:
        default: Enter CIDR of the Private Subnet 1
      PrivateCIDR2:
        default: Enter CIDR of the Private Subnet 2
      KeyPairName1:
        default: Linux_JumpBox
      KeyPairName2:
        default: Front_Facing_Server
      KeyPairName3:
        default: App_Server                   
      

Parameters:
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for entire VPC.
    Type: String
  PublicCIDR1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/24
    Description: CIDR block for the Public Subnet
    Type: String
  PublicCIDR2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.2.0/24
    Description: CIDR block for the Public Subnet
    Type: String
  PrivateCIDR1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.3.0/24
    Description: CIDR block for the Private Subnet
    Type: String
  PrivateCIDR2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.4.0/24
    Description: CIDR block for the Private Subnet
    Type: String
  KeyPairName1:
    Description: Keypair for Linux JumpBox
    Type: AWS::EC2::KeyPair::KeyName
    Default: Linux_JumpBox
  KeyPairName2:
    Description: Keypair for Front Facing Server
    Type: AWS::EC2::KeyPair::KeyName
    Default: Front_Facing_Server 
  KeyPairName3:
    Description: Keypair for Front Facing Server
    Type: AWS::EC2::KeyPair::KeyName
    Default: App_Server   

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b0dcb5067f052a63
    us-west-1:
      AMI: ami-0f5e8a042c8bfcd5e
    us-east-2:
      AMI: ami-0beaa649c482330f7
    us-west-2:
      AMI: ami-094125af156557ca2     
    eu-west-1:
      AMI: ami-01cae1550c0adea9c
    ap-southeast-1:
      AMI: ami-0af2f764c580cc1f9
    ap-southeast-2:
      AMI: ami-06bb074d1e196d0d4
    ap-south-1:
      AMI: ami-074dc0a6f6c764218
    ca-central-1:
      AMI: ami-0ee679ef733e3b8e7
    eu-central-1:
      AMI: ami-076309742d466ad69
    eu-west-2:
      AMI: ami-04706e771f950937f
    eu-west-3:
      AMI: ami-0f15e0a4c8d3ee5fe
    eu-north-1:
      AMI: ami-02aeff1a953c5c2ff
    sa-east-1:
      AMI: ami-0b7101e993ea27f3a
  
   

Resources:
      ## VPC
      PubPrivateVPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VPCCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true 
          Tags:
          - Key: Name
            Value:  !Sub VPC ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      ## SUBNETS -> 2 Public and 2 Private   
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [0, !GetAZs '']
          CidrBlock: !Ref PublicCIDR1
          MapPublicIpOnLaunch: true
          Tags:
          - Key: Name
            Value: !Sub Public ${PublicCIDR1}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
     
      PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [1, !GetAZs '']
          CidrBlock: !Ref PublicCIDR2
          MapPublicIpOnLaunch: true
          Tags:
          - Key: Name
            Value: !Sub Public ${PublicCIDR2}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
     
      PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [0, !GetAZs '']
          CidrBlock: !Ref PrivateCIDR1
          MapPublicIpOnLaunch: false
          Tags:
          - Key: Name
            Value: !Sub Private ${PrivateCIDR1}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
     
      PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref PubPrivateVPC
          AvailabilityZone: !Select [1, !GetAZs '']
          CidrBlock: !Ref PrivateCIDR2
          MapPublicIpOnLaunch: false
          Tags:
          - Key: Name
            Value: !Sub Private ${PrivateCIDR2}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
     
     ## INTERNET GATEWAY
      InternetGateway:
        Type: AWS::EC2::InternetGateway
        DependsOn: PubPrivateVPC
      GatewayToInternet:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: !Ref PubPrivateVPC
          InternetGatewayId: !Ref InternetGateway
      
      ## PUBLIC ROUTING
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
          Tags:
          - Key: Name
            Value: Public
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
      
      PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayToInternet
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
     
      PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
      PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable
     
      ## NAT GATEWAY
      # NatGateway:
      #   Type: AWS::EC2::NatGateway
      #   DependsOn: NatPublicIP
      #   Properties: 
      #     SubnetId: !Ref PublicSubnet1
      #     AllocationId: !GetAtt NatPublicIP.AllocationId

     
      ## PRIVATE ROUTING
      PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref PubPrivateVPC
          Tags:
          - Key: Name
            Value: Private
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId
      
      # PrivateRoute:
      #   Type: AWS::EC2::Route
      #   Properties:
      #     NatGatewayId: !Ref NatGateway
      #     RouteTableId: !Ref PrivateRouteTable
      #     DestinationCidrBlock: 0.0.0.0/0
     
      PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet1
          RouteTableId: !Ref PrivateRouteTable
     
      PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PrivateSubnet2
          RouteTableId: !Ref PrivateRouteTable

      PublicSubnetInstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: !Ref PubPrivateVPC
          GroupDescription: Enable SSH access via port 22
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          Tags:
          - Key: Name
            Value: !Sub PublicSecurityGroup ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      PrivateSubnetInstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: !Ref PubPrivateVPC
          GroupDescription: Enable all TCP ports from instances in this VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '1'
            ToPort: '65535'
            CidrIp: !Ref VPCCIDR
          Tags:
          - Key: Name
            Value: !Sub PrivateSecurityGroup ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      
      LinuxJumpBox:
        Type: AWS::EC2::Instance
        DependsOn:
        - InternetGateway
        Properties:
          KeyName: !Ref KeyPairName1
          ImageId: 
           Fn::FindInMap:
           - RegionMap
           - !Ref AWS::Region
           - AMI
          InstanceType: t2.micro
          NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Description: Linux JumpBox of Public Subnet
            DeviceIndex: '0'
            SubnetId: !Ref PublicSubnet1
            GroupSet:
            - !Ref PublicSubnetInstanceSecurityGroup
          Tags:
          - Key: Name
            Value: !Sub Linux JumpBox ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      FrontFacingServer:
        Type: AWS::EC2::Instance
        DependsOn:
        - InternetGateway
        Properties:
          KeyName: !Ref KeyPairName2
          ImageId: 
           Fn::FindInMap:
           - RegionMap
           - !Ref AWS::Region
           - AMI
          InstanceType: t2.micro
          NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Description: Front Facing Server of Public Subnet
            DeviceIndex: '0'
            SubnetId: !Ref PublicSubnet2
            GroupSet:
            - !Ref PublicSubnetInstanceSecurityGroup
          Tags:
          - Key: Name
            Value: !Sub Front Facing Server ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      AppServer:
        Type: AWS::EC2::Instance
        Properties:
          KeyName: !Ref KeyPairName3
          ImageId: 
           Fn::FindInMap:
           - RegionMap
           - !Ref AWS::Region
           - AMI
          InstanceType: t2.micro
          NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeleteOnTermination: true
            Description: App server of Private Subnet
            DeviceIndex: '0'
            SubnetId: !Ref PrivateSubnet1
            GroupSet:
            - !Ref PrivateSubnetInstanceSecurityGroup
          Tags:
          - Key: Name
            Value: !Sub App Server ${VPCCIDR}
          - Key: CloudFormationStack
            Value: !Ref AWS::StackId

      RDSDBSubnetGroup:
         Type: AWS::RDS::DBSubnetGroup
         Properties: 
           DBSubnetGroupDescription: Data base in private Subnet
           DBSubnetGroupName: RDS Subnet
           SubnetIds: 
             - !Ref PrivateSubnet1
             - !Ref PrivateSubnet2

      DBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: !Ref PubPrivateVPC
          GroupDescription: Open database for access
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: !Ref VPCCIDR
          Tags:
          - Key: Name
            Value: DataBase Security Group
            

      RDSDBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          AllocatedStorage: 20
          DBInstanceClass: db.t3.micro
          DBName: MyDBName
          VPCSecurityGroups: 
            - !Ref DBSecurityGroup
          DBSubnetGroupName: !Ref RDSDBSubnetGroup
          Engine: MySQL
          MasterUsername: pratik
          MasterUserPassword: pratik123

Outputs:
# Export VPC ID
  PubPrivateVPC:
    Description: PubPrivateVPC ID
    Export:
      Name: !Sub ${AWS::StackName}-PubPrivateVPC
    Value: !Ref PubPrivateVPC

# Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

# Export Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

# Export Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

# Export Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2    
          
        

    
